apiVersion: v1
kind: Service
metadata:
  name: envoy-svc
spec:
  selector:
    app: envoy
  ports:
    - name: runner
      protocol: TCP
      port: 80
      targetPort: 8080
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: envoy-set
spec:
  selector:
      matchLabels:
        app: "envoy" # has to match .spec.template.metadata.labels
  serviceName: "envoy-svc"
  replicas: 1
  minReadySeconds: 10
  template:
    metadata:
      labels:
        app: envoy
    spec:
      volumes:
        - name: shared
          emptyDir: {}
      initContainers:
      - name: harness-runner
        restartPolicy: Always # i.e. side-car
        image: ${CACTUS_RUNNER_IMAGE}
        ports:
          - containerPort: 8080
        env:
          # - name: APP_PORT # TODO: harness-runner needs to coerce this to int.
          #   value: "8080"
          - name: SERVER_URL
            value: "localhost:8000"
          - name: DATABASE_URL
            value: "postgresql+psycopg://test_user:test_pwd@localhost/test_db"
        volumeMounts:
          - name: shared
            mountPath: /shared
      - name: envoy-db
        image: timescale/timescaledb:latest-pg10
        restartPolicy: Always # i.e. side-car
        ports:
          - containerPort: 5432
        env:
          - name: POSTGRES_USER
            value: "test_user"
          - name: POSTGRES_PASSWORD
            value: "test_pwd"
          - name: POSTGRES_DB
            value: "test_db"
        readinessProbe:
          exec:
            command:
              - psql
              - -U
              - test_user
              - -d
              - test_db
              - -c
              - SELECT 1 FROM site LIMIT 1;

          initialDelaySeconds: 5
          periodSeconds: 5

      - name: envoy-teststack-init
        image: ${ENVOY_TESTSTACK_INIT_IMAGE}
        env:
          - name: "WATCHED_FILE"
            value: "/shared/.kickoff"
        volumeMounts:
          - name: shared
            mountPath: /shared
      containers:
        - name: rabbit-mq
          image: rabbitmq:3-management
          ports:
            - containerPort: 5672
            - containerPort: 15672
          env:
            - name: RABBITMQ_DEFAULT_USER
              value: "guest"
            - name: RABBITMQ_DEFAULT_PASS
              value: "guest"


        - name: taskiq-worker
          image: ${APP_ENVOY_IMAGE}
          command: ["taskiq", "worker", "envoy.notification.main:broker", "envoy.notification.task"]
          env:
            - name: DATABASE_URL
              value: "postgresql+asyncpg://test_user:test_pwd@localhost:5432/test_db"
            - name: CERT_HEADER
              value: "ssl-client-cert"
            - name: ENABLE_NOTIFICATIONS
              value: "True"
            - name: RABBIT_MQ_BROKER_URL
              value: "amqp://guest:guest@localhost:5672"
            - name: ALLOW_DEVICE_REGISTRATION
              value: "True"

        - name: envoy
          image: ${APP_ENVOY_IMAGE}
          command:
            - "sh"
            - "-c"
            - |
                # Wait for RabbitMQ to be ready
                until nc -z localhost 5672; do
                  echo "Waiting for RabbitMQ to become available..."
                  sleep 2
                done
                echo "RabbitMQ is available, starting envoy..."

                exec uvicorn envoy.server.main:app --host 0.0.0.0 --port 8000
          ports:
            - containerPort: 8000
          env:
            - name: DATABASE_URL
              value: "postgresql+asyncpg://test_user:test_pwd@localhost/test_db"
            - name: CERT_HEADER
              value: "ssl-client-cert"
            - name: ENABLE_NOTIFICATIONS
              value: "True"
            - name: RABBIT_MQ_BROKER_URL
              value: "amqp://guest:guest@localhost:5672"
            - name: ALLOW_DEVICE_REGISTRATION
              value: "True"
          volumeMounts:
            - name: shared
              mountPath: /shared

        - name: envoy-admin
          image: ${APP_ENVOY_IMAGE}
          ports:
            - containerPort: 8001
          command:
            - "sh"
            - "-c"
            - |
                # Wait for RabbitMQ to be ready
                until nc -z localhost 5672; do
                  echo "Waiting for RabbitMQ to become available..."
                  sleep 2
                done
                echo "RabbitMQ is available, starting envoy..."

                exec uvicorn envoy.admin.main:app --host 0.0.0.0 --port 8001
          env:
            - name: DATABASE_URL
              value: "postgresql+asyncpg://test_user:test_pwd@localhost/test_db"
            - name: CERT_HEADER
              value: "ssl-client-cert"
            - name: ENABLE_NOTIFICATIONS
              value: "True"
            - name: RABBIT_MQ_BROKER_URL
              value: "amqp://guest:guest@localhost:5672"
            - name: ALLOW_DEVICE_REGISTRATION
              value: "True"
            - name: ADMIN_USERNAME
              value: "admin"
            - name: ADMIN_PASSWORD
              value: "password"
