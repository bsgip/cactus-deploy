#!/bin/bash

CHAIN_ID="$1"
CA_CONFIG_FILE="serca-openssl.cnf"
SERCA_KEY_FILE="serca.key.pem"
SERCA_CERT_FILE="serca.cert.pem"

if [[ -z "${CHAIN_ID}" ]]; then
  echo "usage: create-mca-mica [CHAIN_ID] "
  echo "CHAIN_ID=A unique identifier for the output file names"
  exit 1
fi

if [ ! -f $CA_CONFIG_FILE ] || [ ! -f $SERCA_KEY_FILE ] || [ ! -f $SERCA_CERT_FILE ]; then
  echo "Couldn't find $CA_CONFIG_FILE or $SERCA_CERT_FILE or $SERCA_CERT_FILE - has create-serca.sh been run in this directory?"
  exit 1
fi

MCA_KEY_FILE="mca-$CHAIN_ID.key.pem"
MCA_KEY_PUB_FILE="mca-$CHAIN_ID.key.pub.pem"
MCA_CSR_FILE="/tmp/mca-$CHAIN_ID.csr.pem"
MCA_CERT_FILE="mca-$CHAIN_ID.cert.pem"
MCA_EXT_CONFIG_FILE="mca-$CHAIN_ID-openssl-ext.cnf"

MICA_KEY_FILE="mica-$CHAIN_ID.key.pem"
MICA_KEY_PUB_FILE="mica-$CHAIN_ID.key.pub.pem"
MICA_CSR_FILE="/tmp/mica-$CHAIN_ID.csr.pem"
MICA_CERT_FILE="mica-$CHAIN_ID.cert.pem"
MICA_EXT_CONFIG_FILE="mica-$CHAIN_ID-openssl-ext.cnf"


oid_2030_5="1.3.6.1.4.1.40732"         # OID base for IEEE 2030 (section 6.11.7.1 in IEEE2030.5 2018)
oid_dev="$oid_2030_5.1"                # OID for "device types" (section 6.11.7.2 in IEEE2030.5 2018)
oid_dev_generic="$oid_dev.1"           # Used for most devices
oid_dev_mobile="$oid_dev.2"            # Used in addition to "generic device type" to identify "mobile" IEEE 2030.5 entities
oid_dev_post_manufacture="$oid_dev.3"  # Used in device certs issued post-manufacture
 
oid_policy="$oid_2030_5.2"                    # OID for 2030.5 Policy Assignments (section 6.11.7.3 in IEEE2030.5 2018)
oid_2030_5_policy_test="$oid_policy.1"        # MUST be included in test certificates
oid_2030_5_policy_selfsign="$oid_policy.2"    # MUST be included in IEEE 2030.5 self-signed certificates
oid_2030_5_policy_commercial="$oid_policy.3"  # MUST be included in commercial certificates
oid_2030_5_policy_bulk="$oid_policy.4"        # MUST be included in bulk-issued certificates (Priv. Key generated by CA, not by device)


# Generate keys
openssl ecparam -name prime256v1 -genkey -noout -out $MCA_KEY_FILE
#chmod 400 $MCA_KEY_FILE
openssl ecparam -name prime256v1 -genkey -noout -out $MICA_KEY_FILE
#chmod 400 $MICA_KEY_FILE

# Generate subjectKeyIdentifier from the public key (2030.5 6.11.6)
# Method requires the least significant 60 bits of the SHA-1 public key 
openssl ec -in $MCA_KEY_FILE -pubout -outform DER -out $MCA_KEY_PUB_FILE
SHA1_HASH=$(openssl dgst -sha1 -binary $MCA_KEY_PUB_FILE | xxd -p)
MCA_KEY_IDENTIFIER="4${SHA1_HASH:15}"

openssl ec -in $MICA_KEY_FILE -pubout -outform DER -out $MICA_KEY_PUB_FILE
SHA1_HASH=$(openssl dgst -sha1 -binary $MICA_KEY_PUB_FILE | xxd -p)
MICA_KEY_IDENTIFIER="4${SHA1_HASH:15}"


cat > $MCA_EXT_CONFIG_FILE <<EOL
[ v3_ca ]
subjectKeyIdentifier   = $MCA_KEY_IDENTIFIER
basicConstraints       = critical,CA:true,pathlen:1
keyUsage               = critical, keyCertSign
certificatePolicies    = $oid_dev
EOL

cat > $MICA_EXT_CONFIG_FILE <<EOL
[ v3_ca ]
subjectKeyIdentifier   = $MICA_KEY_IDENTIFIER
basicConstraints       = critical,CA:true,pathlen:0
keyUsage               = critical, keyCertSign
certificatePolicies    = $oid_dev
EOL

# Generate CSR and sign MCA cert
echo "Generating MCA"
days_until_9999=$(echo $(( ( $(date -d '9999-12-31' +%s) - $(date +%s) ) / 86400 )))
openssl req -new -key "$MCA_KEY_FILE" -out "$MCA_CSR_FILE" -config "$CA_CONFIG_FILE" -subj "/C=AU/O=CACTUS $CHAIN_ID/CN=IEEE 2030.5 MCA"
openssl ca -config "$CA_CONFIG_FILE" -days $days_until_9999 -notext -in "$MCA_CSR_FILE" -out "$MCA_CERT_FILE" -extfile "$MCA_EXT_CONFIG_FILE" -extensions v3_ca -md sha256 -batch

# Now use the MCA to create a new cert (which will be the MICA)
echo "Generating MICA"
openssl req -new -key "$MICA_KEY_FILE" -out "$MICA_CSR_FILE" -config "$CA_CONFIG_FILE" -subj "/C=AU/O=CACTUS $CHAIN_ID/CN=IEEE 2030.5 MICA"
openssl x509 -req -in "$MICA_CSR_FILE" -CA "$MCA_CERT_FILE" -CAkey "$MCA_KEY_FILE" -set_serial 1000 -out "$MICA_CERT_FILE" -days $days_until_9999 -extfile "$MICA_EXT_CONFIG_FILE" -extensions v3_ca -sha256
